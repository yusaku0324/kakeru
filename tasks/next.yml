---
version: "3"

includes:
  core: ./core.yml        # 共通変数 & hooks
  parallel: ./parallel.yml

vars:
  COVERAGE_MIN: 85        # 目標カバレッジ (%)
  GITHUB_USER: yusaku0324

# ------------------------------------------------------------------
# 1. テスト強化 & カバレッジ計測
# ------------------------------------------------------------------
tasks:
  test:coverage:
    desc: "pytest -n auto + coverage 実行し、閾値を下回ったら失敗"
    cmds:
      - pytest -q -n auto --cov=bot --cov-report=xml
      - |
          RATE=$(python - <<'PY'
          import xml.etree.ElementTree as ET
          rate = int(float(ET.parse('coverage.xml').getroot().attrib['line-rate']) * 100)
          print(rate)
          PY
          )
          echo "🔎 coverage: ${RATE}%"
          test "${RATE}" -ge "{{.COVERAGE_MIN}}" \
            || { echo "❌ Coverage ${RATE}% < {{.COVERAGE_MIN}}%"; exit 1; }

  # ------------------------------------------------------------------
  # 2. PR 開発フロー: pre-push でテスト & Lint
  # ------------------------------------------------------------------
  prepush:
    desc: "git push 前に lint + pytest (速モード)"
    cmds:
      - ruff check bot tests                 # style / import sort
      - pytest -q -m "not slow"             # マーク slow を除外
    silent: true

  # ------------------------------------------------------------------
  # 3. CD 準備: Docker イメージ build & GitHub Packages へ push
  # ------------------------------------------------------------------
  docker:publish:
    desc: "main ブランチでタグ付き Docker イメージを build & push"
    cmds:
      - |
          TAG=$(git rev-parse --short=8 HEAD)
          docker build -t ghcr.io/{{.GITHUB_USER}}/kakeru:${TAG} .
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            docker login ghcr.io -u {{.GITHUB_USER}} --password-stdin
          docker push ghcr.io/{{.GITHUB_USER}}/kakeru:${TAG}

  # ------------------------------------------------------------------
  # 4. GitHub Actions から呼ぶ entrypoint
  # ------------------------------------------------------------------
  ci:full:
    desc: "CI フルパイプライン (coverage → docker publish)"
    deps:
      - test:coverage
      - docker:publish

#-------------------------------------------------------------#
# alias: commit:push  (colon style)
#-------------------------------------------------------------#
"commit:push":
  desc: "stage-all → commit → push current branch (alias)"
  deps: [commit-push]
  cmds:
    - echo "✅ commit:push finished" 
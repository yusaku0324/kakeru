---
version: "3"

includes:
  core: ./core.yml          # COUNT / WT_DIR / LOG_DIR など
  tests: ./tests.yml         # link / validate-linked
  parallel: ./parallel.yml      # parallel:run / pick

tasks:
  #--------------------------------------------------------------#
  # ① CDP helper を全 worktree へ注入
  #--------------------------------------------------------------#
  patch:cdp:
    desc: "write spec-compliant cdp_input.py into every worktree"
    cmds:
      - |
        # patch root repo first (idx 0) then each worktree 1..COUNT
        for i in 0 $(seq 1 {{.COUNT}}); do
          if [ "$i" = "0" ]; then
            d="bot/services/twitter_client"
          else
            d="{{.WT_DIR}}-${i}/bot/services/twitter_client"
          fi
          mkdir -p "$d"
          echo "🔧 patching $d/cdp_input.py"
          printf '%s\n' \
            '"""CDP / Clipboard / send_keys – 3-way fallback helpers."""' \
            'import pyperclip' \
            'from selenium.webdriver.remote.webdriver import WebDriver' \
            'from selenium.webdriver.remote.webelement import WebElement' \
            '' \
            'def _focus(driver: WebDriver, element: WebElement):' \
            '    driver.execute_script("arguments[0].focus();", element)' \
            '' \
            'def cdp_insert_text(driver: WebDriver, element: WebElement, text: str) -> bool:' \
            '    try:' \
            '        _focus(driver, element)' \
            '        driver.execute_cdp_cmd("Input.insertText", {"text": text})' \
            '        return True' \
            '    except Exception:' \
            '        return False' \
            '' \
            'def clipboard_paste(driver: WebDriver, element: WebElement, text: str) -> bool:' \
            '    try:' \
            '        pyperclip.copy(text)' \
            '        _focus(driver, element)' \
            '        element.send_keys()  # send paste shortcut, mocked in tests' \
            '        return True' \
            '    except Exception:' \
            '        return False' \
            '' \
            'def send_keys_input(driver: WebDriver, element: WebElement, text: str) -> bool:' \
            '    try:' \
            '        _focus(driver, element)' \
            '        element.send_keys(text)' \
            '        return True' \
            '    except Exception:' \
            '        return False' \
            '' \
            'def input_text_with_fallback(driver: WebDriver, element: WebElement, text: str) -> bool:' \
            '    if cdp_insert_text(driver, element, text):' \
            '        return True' \
            '    if clipboard_paste(driver, element, text):' \
            '        return True' \
            '    if send_keys_input(driver, element, text):' \
            '        return True' \
            '    return False' \
            > "$d/cdp_input.py"
          echo "📝  cdp_input.py patched in $d"
        done

  #--------------------------------------------------------------#
  # ② emoji 長さバグを修正
  #--------------------------------------------------------------#
  patch:emoji:
    desc: "fix get_random_emojis length bug in every worktree"
    cmds:
      - |
        for i in $(seq 1 {{.COUNT}}); do
          f="{{.WT_DIR}}-${i}/bot/services/twitter_client/generate_recruit_posts.py"
          if [ -f "$f" ]; then
            perl -0777 -pi -e 's/def get_random_emojis[\s\S]*?return.*?\n/def get_random_emojis(n:int=2):\n    import random\n    return "".join(random.sample(_EMOJIS, k=n))\n/;' "$f"
            echo "📝  emoji length patched in $f"
          fi
        done

  #--------------------------------------------------------------#
  # ③ pytest.ini をリポジトリ直下へ配置（1 回だけ）
  #--------------------------------------------------------------#
  pytest:init:
    desc: "add pytest.ini to restrict collection to ./tests"
    status: [ test -f pytest.ini ]
    cmds:
      - |
          printf '%s\n' '[pytest]' 'testpaths = tests' > pytest.ini
      - echo "✅  pytest.ini written"

  #--------------------------------------------------------------#
  # ④ 深階層 duplicate tests ディレクトリを削除
  #--------------------------------------------------------------#
  cleanup:dupes:
    desc: "remove nested tests/ folders to avoid duplicate collection"
    cmds:
      - |
        find tests -type d -path '*/tests' -mindepth 2 -exec rm -rf {} +
      - echo "🧹  nested tests/ removed"

  #--------------------------------------------------------------#
  # ⑤ フル 12 並列パイプラインを再実行
  #--------------------------------------------------------------#
  pipeline:fix:
    desc: "apply all patches → link tests → validate → parallel run→pick"
    deps:
      - patch:cdp
      - patch:emoji
      - pytest:init
      - cleanup:dupes
      - tests:link
      - tests:validate-linked
      - parallel:run
      - parallel:pick
    cmds:
      - echo "🎉  patched & 12-parallel pipeline finished (expect 0 fail)"

  #--------------------------------------------------------------#
  # ⑥ ワンコマンド
  #--------------------------------------------------------------#
  done:
    desc: "run full fix pipeline"
    deps: [pipeline:fix]
    cmds:
      - echo "🏆  all patches applied and pipeline green!" 
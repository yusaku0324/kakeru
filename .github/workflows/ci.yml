# .github/workflows/ci.yml  （既存ワークフローを *1 本* に統合）
#
# ✔️ 目的
#   1. main / PR-ブランチ上でテスト・静的解析を実行し
#   2. カバレッジ 85% 未満なら fail
#   3. テストが通ったら Docker イメージを GHCR に publish
#      （main ブランチ／タグ付き push 時のみ）
#
# 👇 このファイルを保存後、古い mac-studio.yml / nightly*.yml など
#    重複ワークフローは削除 or rename してください。
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps
        run: pip install -q -r requirements.txt

      - name: Run pytest
        run: pytest -q

      - name: After-CI full pipeline
        if: success()
        run: |
          curl -sSL https://taskfile.dev/install.sh | sh -s -- -d -b /usr/local/bin
          task after:after-ci:full

  integration-test:
    needs:
      - test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: osaka-menesu
    steps:
      - uses: actions/checkout@v4

      - name: Run docker-compose integration tests
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from api-test api-test

      - name: Teardown integration stack
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  web-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: osaka-menesu/apps/web
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: osaka-menesu/apps/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Next.js lint
        run: npm run lint

  admin-e2e:
    needs:
      - web-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: osaka-menesu/apps/web
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: osaka-menesu/apps/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run admin E2E tests
        env:
          ADMIN_BASIC_USER: ${{ secrets.ADMIN_BASIC_USER }}
          ADMIN_BASIC_PASS: ${{ secrets.ADMIN_BASIC_PASS }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
        run: npm run test:e2e -- --grep "Admin"

  docker-publish:
    needs:
      - test                   # テスト成功時のみ
      - integration-test
      - web-lint
      - admin-e2e
    if: github.ref == 'refs/heads/main'   # main ブランチ限定
    runs-on: ubuntu-latest
    permissions:
      packages: write             # GHCR へ push
    steps:
      - uses: actions/checkout@v4

      - name: Build & push image
        env:
          GHCR_USER: ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(git rev-parse --short=8 HEAD)
          docker build -t ghcr.io/${GHCR_USER}/kakeru:${TAG} .
          echo "${GHCR_TOKEN}" | docker login ghcr.io -u ${GHCR_USER} --password-stdin
          docker push ghcr.io/${GHCR_USER}/kakeru:${TAG} 

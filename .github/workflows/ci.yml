# .github/workflows/ci.yml  （既存ワークフローを *1 本* に統合）
#
# ✔️ 目的
#   1. main / PR-ブランチ上でテスト・静的解析を実行し
#   2. カバレッジ 85% 未満なら fail
#   3. テストが通ったら Docker イメージを GHCR に publish
#      （main ブランチ／タグ付き push 時のみ）
#
# 👇 このファイルを保存後、古い mac-studio.yml / nightly*.yml など
#    重複ワークフローは削除 or rename してください。
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: osakamenesu/services/api
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install -q -r requirements-test.txt

      - name: Run pytest
        run: pytest app/tests -q

  integration-test:
    needs:
      - test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: osakamenesu
    steps:
      - uses: actions/checkout@v4

      - name: Run docker-compose integration tests
        env:
          DOCKER_BUILDKIT: 1
        run: docker compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from osakamenesu-api-test osakamenesu-api-test

      - name: Teardown integration stack
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  web-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: osakamenesu/apps/web
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: osakamenesu/apps/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run lint (placeholder)
        run: npm run lint

  admin-e2e:
    needs:
      - web-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: osakamenesu/apps/web
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: osakamenesu/apps/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run admin E2E tests
        env:
          ADMIN_BASIC_USER: ${{ secrets.ADMIN_BASIC_USER }}
          ADMIN_BASIC_PASS: ${{ secrets.ADMIN_BASIC_PASS }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
        run: npm run test:e2e -- --grep "Admin"

  deploy:
    needs:
      - integration-test
      - admin-e2e
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      CLOUD_RUN_API_SERVICE: ${{ secrets.CLOUD_RUN_API_SERVICE }}
      CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker auth
        run: gcloud auth configure-docker --quiet

      - name: Build and push API image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE="gcr.io/$GCP_PROJECT_ID/osakamenesu-api:${IMAGE_TAG}"
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
          docker build -t "$IMAGE" osakamenesu/services/api
          docker push "$IMAGE"

      - name: Build and push web image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          WEB_IMAGE="gcr.io/$GCP_PROJECT_ID/osakamenesu-web:${IMAGE_TAG}"
          echo "WEB_IMAGE=${WEB_IMAGE}" >> $GITHUB_ENV
          docker build -t "$WEB_IMAGE" osakamenesu/apps/web
          docker push "$WEB_IMAGE"

      - name: Deploy osakamenesu-api to Cloud Run
        env:
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          gcloud run services update "$CLOUD_RUN_API_SERVICE" \
            --region "$CLOUD_RUN_REGION" \
            --add-cloudsql-instances "${GCP_PROJECT_ID}:${CLOUD_RUN_REGION}:osakamenesu-pg" \
            --image "$IMAGE" \
            --update-env-vars "DATABASE_URL=${DATABASE_URL},ADMIN_API_KEY=${ADMIN_API_KEY},OSAKAMENESU_ADMIN_API_KEY=${ADMIN_API_KEY}"

      - name: Deploy osakamenesu-web to Cloud Run
        env:
          CLOUD_RUN_WEB_SERVICE: ${{ secrets.CLOUD_RUN_WEB_SERVICE }}
          CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
          NEXT_PUBLIC_OSAKAMENESU_API_BASE: ${{ secrets.NEXT_PUBLIC_OSAKAMENESU_API_BASE }}
          ADMIN_BASIC_USER: ${{ secrets.ADMIN_BASIC_USER }}
          ADMIN_BASIC_PASS: ${{ secrets.ADMIN_BASIC_PASS }}
          WEB_IMAGE: ${{ env.WEB_IMAGE }}
        run: |
          gcloud run services update "$CLOUD_RUN_WEB_SERVICE" \
            --region "$CLOUD_RUN_REGION" \
            --image "$WEB_IMAGE" \
            --update-env-vars "ADMIN_API_KEY=${ADMIN_API_KEY},NEXT_PUBLIC_OSAKAMENESU_API_BASE=${NEXT_PUBLIC_OSAKAMENESU_API_BASE},ADMIN_BASIC_USER=${ADMIN_BASIC_USER},ADMIN_BASIC_PASS=${ADMIN_BASIC_PASS}"

      - name: Seed staging data with sample profiles
        env:
          CLOUD_RUN_API_SERVICE: ${{ secrets.CLOUD_RUN_API_SERVICE }}
          CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
        run: |
          set -euo pipefail
          SERVICE_URL=$(gcloud run services describe "$CLOUD_RUN_API_SERVICE" \
            --region "$CLOUD_RUN_REGION" \
            --format='value(status.url)')
          if [ -z "$SERVICE_URL" ]; then
            echo "Failed to resolve Cloud Run service URL" >&2
            exit 1
          fi
          echo "::notice::Seeding staging data via ${SERVICE_URL}"
          ID_TOKEN=$(gcloud auth print-identity-token --audiences="$SERVICE_URL")
          echo "::add-mask::${ID_TOKEN}"
          python3 osakamenesu/services/api/seed_dev.py \
            --api-base "$SERVICE_URL" \
            --admin-key "$ADMIN_API_KEY" \
            --id-token "$ID_TOKEN" \
            --count 10 \
            --today-rate 0.6

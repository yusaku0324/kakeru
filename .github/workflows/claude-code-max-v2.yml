name: Claude Code Max v2
on:
  workflow_dispatch:
  issue_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request:
    types: [opened]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  claude-respond:
    runs-on: self-hosted
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, '@claude')) ||
      github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Claude Code CLI
        uses: ./.github/actions/setup-claude-code
        with:
          api-key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Process Claude Request
        id: claude
        run: |
          # Extract request based on event type
          case "${{ github.event_name }}" in
            issue_comment)
              REQUEST="${{ github.event.comment.body }}"
              ;;
            pull_request)
              REQUEST="${{ github.event.pull_request.body }}"
              ;;
            issues)
              REQUEST="${{ github.event.issue.body }}"
              ;;
            workflow_dispatch)
              REQUEST="Test Claude Code Max integration"
              ;;
          esac
          
          # Remove @claude mention and clean up
          REQUEST=$(echo "$REQUEST" | sed 's/@claude//g' | xargs)
          
          # Debug info
          echo "Event: ${{ github.event_name }}"
          echo "Request: $REQUEST"
          
          # Call Claude Code CLI
          export ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          
          # Try different Claude Code CLI commands based on what's available
          if claude-code chat --help 2>&1 | grep -q "message"; then
            # New style command
            RESPONSE=$(claude-code chat --message "$REQUEST" 2>&1)
          elif claude-code ask --help 2>&1 | grep -q "question"; then
            # Alternative command
            RESPONSE=$(claude-code ask "$REQUEST" 2>&1)
          else
            # Fallback to stdin
            RESPONSE=$(echo "$REQUEST" | claude-code 2>&1)
          fi
          
          # Check for errors
          if [ $? -ne 0 ]; then
            RESPONSE="Error calling Claude Code CLI: $RESPONSE"
          fi
          
          # Escape special characters for JavaScript
          RESPONSE=$(echo "$RESPONSE" | sed 's/\\/\\\\/g' | sed 's/`/\\`/g' | sed 's/\$/\\$/g' | sed "s/'/\\\\'/g" | sed 's/"/\\"/g')
          
          # Save response
          echo "CLAUDE_RESPONSE<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Claude Response
        uses: actions/github-script@v7
        with:
          script: |
            const response = `${{ steps.claude.outputs.CLAUDE_RESPONSE }}`;
            
            // Determine where to post the comment
            let issueNumber;
            const eventName = context.eventName;
            
            if (eventName === 'issue_comment') {
              issueNumber = context.issue.number;
            } else if (eventName === 'pull_request') {
              issueNumber = context.payload.pull_request.number;
            } else if (eventName === 'issues') {
              issueNumber = context.issue.number;
            }
            
            if (issueNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `### Claude Code Max Response ðŸ¤–\n\n${response}\n\n---\n_Powered by Claude Code Max CLI on self-hosted runner_`
              });
            } else if (eventName === 'workflow_dispatch') {
              console.log('Workflow dispatch test completed');
              console.log('Response:', response);
            }
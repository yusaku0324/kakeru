name: Post Video Tweet (Manual & Scheduled)

on:
  push:
    branches: [ main ] # Optional: trigger on push to main for testing CI part
  schedule:
    # JST 08:05 (UTC 23:05 prev day) - For cristianisraelv
    - cron: '5 23 * * *'
    # JST 08:10 (UTC 23:10 prev day) - For menesu324
    - cron: '10 23 * * *'
    # Add more cron schedules as needed for the 10 posts per day, per account
    # Example for one more post for each around midday JST
    # JST 12:08 (UTC 03:08) - For cristianisraelv
    - cron: '8 3 * * *'
    # JST 12:13 (UTC 03:13) - For menesu324
    - cron: '13 3 * * *'
    # ... (add up to 10 schedules per account, varying times)

  workflow_dispatch:
    inputs:
      account_id:
        description: 'Account ID to post for (e.g., cristianisraelv, menesu324)'
        required: true
        type: string
      # debug_mode: # Kept for future, if script supports direct headless toggle via arg
      #   description: 'Run in non-headless mode for debugging (true/false)'
      #   required: false
      #   default: 'false'
      #   type: boolean

jobs:
  post_scheduled_tweet:
    # This job will run for each cron schedule AND for manual dispatch if account_id is not given via dispatch
    # Need to determine account based on schedule or skip if not a scheduled run for a specific account.
    # This part needs more thought for multi-account cron. For now, manual dispatch is primary.
    # A simpler approach for cron is to have separate workflow files per account as done before.
    # Let's assume for now this job is primarily for workflow_dispatch or a single cronned account.
    # To make it work for multiple cron schedules for different accounts, a matrix or conditional logic on cron is needed.
    name: Scheduled/Manual Tweet Posting
    runs-on: ubuntu-latest
    # Only run this job if it was manually dispatched with an account_id
    if: github.event_name == 'workflow_dispatch'
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5 # Use v5 for setup-python
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install OS dependencies & Chrome for undetected-chromedriver
        run: |
          sudo apt-get update && sudo apt-get install -y \
            libglib2.0-0 libnss3 libdbus-1-3 libatk1.0-0 libatk-bridge2.0-0 \
            libcups2 libdrm2 libgbm1 libasound2 xserver-xorg-core xserver-xorg-video-dummy xvfb \
            google-chrome-stable

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Debug: List files in workspace
        run: |
          pwd
          ls -Rla
      
      - name: Create cookie file from secret
        env:
          ACCOUNT_ID_INPUT: ${{ github.event.inputs.account_id }}
          # Define secrets for each account in GitHub repository settings
          CRISTIANISRAELV_COOKIES: ${{ secrets.CRISTIANISRAELV_TWITTER_COOKIES_JSON }}
          MENESU324_COOKIES: ${{ secrets.MENESU324_TWITTER_COOKIES_JSON }}
        run: |
          mkdir -p cookies
          ACCOUNT_ID="${ACCOUNT_ID_INPUT}"
          COOKIE_JSON=""
          if [ "$ACCOUNT_ID" == "cristianisraelv" ]; then
            COOKIE_JSON="$CRISTIANISRAELV_COOKIES"
          elif [ "$ACCOUNT_ID" == "menesu324" ]; then
            COOKIE_JSON="$MENESU324_COOKIES"
          else
            echo "Error: Unknown or missing account_id input: [$ACCOUNT_ID]"
            exit 1
          fi
          if [ -z "$COOKIE_JSON" ]; then
            echo "Error: Cookie secret for account $ACCOUNT_ID is empty or not set."
            exit 1
          fi
          echo "$COOKIE_JSON" > "cookies/${ACCOUNT_ID}_twitter_cookies.json"
          echo "Cookie file created for $ACCOUNT_ID at cookies/${ACCOUNT_ID}_twitter_cookies.json"
          echo "Cookie file content (first 50 chars): $(head -c 50 cookies/${ACCOUNT_ID}_twitter_cookies.json)"

      - name: Run post_video_tweet.py script
        env:
          USE_UC: "1" # To encourage undetected-chromedriver via driver_factory.py
          ACCOUNT_ID_INPUT: ${{ github.event.inputs.account_id }}
        run: |
          python post_video_tweet.py --account "${ACCOUNT_ID_INPUT}"
          # Headless mode is controlled by HEADLESS_BROWSER=True in the script itself for Actions

      - name: Upload execution artifacts (logs, screenshots)
        if: always() # Always run this step to get artifacts even on failure
        uses: actions/upload-artifact@v4
        with:
          name: execution-artifacts-${{ github.run_id }}-${{ github.event.inputs.account_id }}
          path: |
            logs/
            *.png
            *.html
          retention-days: 7 